{
  "version": 3,
  "sources": ["../../src/mirrors/index.ts"],
  "sourcesContent": ["import \"./index.css\";\n\nconst canvas = document.getElementById(\"canvas\") as HTMLCanvasElement;\nconst ctx = canvas.getContext(\"2d\");\n\nlet ma = Math.PI / 3;\nlet oa = Math.PI / 6;\nlet od = 200;\n\nconst c = (x: number) => od * Math.cos(x);\nconst s = (x: number) => od * Math.sin(x);\nconst p = (x: number, y: number) => {\n    ctx.beginPath();\n    ctx.arc(x, y, 5, 0, 2 * Math.PI);\n    ctx.fill();\n};\n\ncanvas.width = window.innerWidth;\ncanvas.height = window.innerHeight;\n\nctx.fillStyle = ctx.strokeStyle = \"white\";\nctx.scale(1, -1);\nctx.translate(window.innerWidth / 2, -window.innerHeight / 2);\n\nlet render = () => {\n    ctx.clearRect(-window.innerWidth / 2, -window.innerHeight / 2, window.innerWidth, window.innerHeight);\n    ctx.beginPath();\n    ctx.arc(0, 0, od, 0, 2 * Math.PI);\n    ctx.stroke();\n\n    ctx.beginPath();\n    ctx.moveTo(od, 0);\n    ctx.lineTo(0, 0);\n    ctx.lineTo(c(ma), s(ma));\n    ctx.stroke();\n\n    let processed_points: number[] = [];\n    let points = [oa];\n\n    for (let i = 0; i < 100 && points.length > 0; i++) {\n        let new_points = [];\n        for (let point of points) {\n            if (point < Math.PI) {\n                new_points.push(2 * Math.PI - point);\n            }\n            if (point < ma || point > Math.PI + ma) {\n                new_points.push((2 * ma - point + 6 * Math.PI) % (2 * Math.PI));\n            }\n        }\n        processed_points = processed_points.concat(points);\n        points = new_points;\n    }\n\n    processed_points.forEach(pt => p(c(pt), s(pt)));\n};\nrender();\n\nlet X = 0;\nwindow.onpointerdown = e => X = Math.floor((3 - 1e-10) * e.x / window.innerWidth);\n\nwindow.onpointermove = e => {\n    if (X === 0) {\n        ma += e.movementY / 500 + 2 * Math.PI;\n        ma %= Math.PI;\n    }\n    if (X === 2) {\n        oa += e.movementY / 1000 + 2 * Math.PI;\n        oa %= Math.PI;\n    }\n    if (X === 1) {\n        let k = oa / ma;\n        ma += e.movementY / 500 + 2 * Math.PI;\n        ma %= Math.PI;\n        oa = k * ma;\n    }\n    render();\n}\n"],
  "mappings": ";;AAEA,MAAM,SAAS,SAAS,eAAe,QAAQ;AAC/C,MAAM,MAAM,OAAO,WAAW,IAAI;AAElC,MAAI,KAAK,KAAK,KAAK;AACnB,MAAI,KAAK,KAAK,KAAK;AACnB,MAAI,KAAK;AAET,MAAM,IAAI,CAAC,MAAc,KAAK,KAAK,IAAI,CAAC;AACxC,MAAM,IAAI,CAAC,MAAc,KAAK,KAAK,IAAI,CAAC;AACxC,MAAM,IAAI,CAAC,GAAW,MAAc;AAChC,QAAI,UAAU;AACd,QAAI,IAAI,GAAG,GAAG,GAAG,GAAG,IAAI,KAAK,EAAE;AAC/B,QAAI,KAAK;AAAA,EACb;AAEA,SAAO,QAAQ,OAAO;AACtB,SAAO,SAAS,OAAO;AAEvB,MAAI,YAAY,IAAI,cAAc;AAClC,MAAI,MAAM,GAAG,EAAE;AACf,MAAI,UAAU,OAAO,aAAa,GAAG,CAAC,OAAO,cAAc,CAAC;AAE5D,MAAI,SAAS,MAAM;AACf,QAAI,UAAU,CAAC,OAAO,aAAa,GAAG,CAAC,OAAO,cAAc,GAAG,OAAO,YAAY,OAAO,WAAW;AACpG,QAAI,UAAU;AACd,QAAI,IAAI,GAAG,GAAG,IAAI,GAAG,IAAI,KAAK,EAAE;AAChC,QAAI,OAAO;AAEX,QAAI,UAAU;AACd,QAAI,OAAO,IAAI,CAAC;AAChB,QAAI,OAAO,GAAG,CAAC;AACf,QAAI,OAAO,EAAE,EAAE,GAAG,EAAE,EAAE,CAAC;AACvB,QAAI,OAAO;AAEX,QAAI,mBAA6B,CAAC;AAClC,QAAI,SAAS,CAAC,EAAE;AAEhB,aAAS,IAAI,GAAG,IAAI,OAAO,OAAO,SAAS,GAAG,KAAK;AAC/C,UAAI,aAAa,CAAC;AAClB,eAAS,SAAS,QAAQ;AACtB,YAAI,QAAQ,KAAK,IAAI;AACjB,qBAAW,KAAK,IAAI,KAAK,KAAK,KAAK;AAAA,QACvC;AACA,YAAI,QAAQ,MAAM,QAAQ,KAAK,KAAK,IAAI;AACpC,qBAAW,MAAM,IAAI,KAAK,QAAQ,IAAI,KAAK,OAAO,IAAI,KAAK,GAAG;AAAA,QAClE;AAAA,MACJ;AACA,yBAAmB,iBAAiB,OAAO,MAAM;AACjD,eAAS;AAAA,IACb;AAEA,qBAAiB,QAAQ,QAAM,EAAE,EAAE,EAAE,GAAG,EAAE,EAAE,CAAC,CAAC;AAAA,EAClD;AACA,SAAO;AAEP,MAAI,IAAI;AACR,SAAO,gBAAgB,OAAK,IAAI,KAAK,OAAO,IAAI,SAAS,EAAE,IAAI,OAAO,UAAU;AAEhF,SAAO,gBAAgB,OAAK;AACxB,QAAI,MAAM,GAAG;AACT,YAAM,EAAE,YAAY,MAAM,IAAI,KAAK;AACnC,YAAM,KAAK;AAAA,IACf;AACA,QAAI,MAAM,GAAG;AACT,YAAM,EAAE,YAAY,MAAO,IAAI,KAAK;AACpC,YAAM,KAAK;AAAA,IACf;AACA,QAAI,MAAM,GAAG;AACT,UAAI,IAAI,KAAK;AACb,YAAM,EAAE,YAAY,MAAM,IAAI,KAAK;AACnC,YAAM,KAAK;AACX,WAAK,IAAI;AAAA,IACb;AACA,WAAO;AAAA,EACX;",
  "names": []
}
