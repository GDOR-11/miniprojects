{
  "version": 3,
  "sources": ["../../node_modules/gl-matrix/esm/common.js", "../../node_modules/gl-matrix/esm/mat2d.js", "../../node_modules/gl-matrix/esm/vec2.js", "../../node_modules/movable-render-space/lib/index.js", "../../src/game_of_life/index.ts"],
  "sourcesContent": ["/**\n * Common utilities\n * @module glMatrix\n */\n// Configuration Constants\nexport var EPSILON = 0.000001;\nexport var ARRAY_TYPE = typeof Float32Array !== 'undefined' ? Float32Array : Array;\nexport var RANDOM = Math.random;\n/**\n * Sets the type of array used when creating new vectors and matrices\n *\n * @param {Float32ArrayConstructor | ArrayConstructor} type Array type, such as Float32Array or Array\n */\n\nexport function setMatrixArrayType(type) {\n  ARRAY_TYPE = type;\n}\nvar degree = Math.PI / 180;\n/**\n * Convert Degree To Radian\n *\n * @param {Number} a Angle in Degrees\n */\n\nexport function toRadian(a) {\n  return a * degree;\n}\n/**\n * Tests whether or not the arguments have approximately the same value, within an absolute\n * or relative tolerance of glMatrix.EPSILON (an absolute tolerance is used for values less\n * than or equal to 1.0, and a relative tolerance is used for larger values)\n *\n * @param {Number} a The first number to test.\n * @param {Number} b The second number to test.\n * @returns {Boolean} True if the numbers are approximately equal, false otherwise.\n */\n\nexport function equals(a, b) {\n  return Math.abs(a - b) <= EPSILON * Math.max(1.0, Math.abs(a), Math.abs(b));\n}\nif (!Math.hypot) Math.hypot = function () {\n  var y = 0,\n      i = arguments.length;\n\n  while (i--) {\n    y += arguments[i] * arguments[i];\n  }\n\n  return Math.sqrt(y);\n};", "import * as glMatrix from \"./common.js\";\n/**\n * 2x3 Matrix\n * @module mat2d\n * @description\n * A mat2d contains six elements defined as:\n * <pre>\n * [a, b,\n *  c, d,\n *  tx, ty]\n * </pre>\n * This is a short form for the 3x3 matrix:\n * <pre>\n * [a, b, 0,\n *  c, d, 0,\n *  tx, ty, 1]\n * </pre>\n * The last column is ignored so the array is shorter and operations are faster.\n */\n\n/**\n * Creates a new identity mat2d\n *\n * @returns {mat2d} a new 2x3 matrix\n */\n\nexport function create() {\n  var out = new glMatrix.ARRAY_TYPE(6);\n\n  if (glMatrix.ARRAY_TYPE != Float32Array) {\n    out[1] = 0;\n    out[2] = 0;\n    out[4] = 0;\n    out[5] = 0;\n  }\n\n  out[0] = 1;\n  out[3] = 1;\n  return out;\n}\n/**\n * Creates a new mat2d initialized with values from an existing matrix\n *\n * @param {ReadonlyMat2d} a matrix to clone\n * @returns {mat2d} a new 2x3 matrix\n */\n\nexport function clone(a) {\n  var out = new glMatrix.ARRAY_TYPE(6);\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  out[3] = a[3];\n  out[4] = a[4];\n  out[5] = a[5];\n  return out;\n}\n/**\n * Copy the values from one mat2d to another\n *\n * @param {mat2d} out the receiving matrix\n * @param {ReadonlyMat2d} a the source matrix\n * @returns {mat2d} out\n */\n\nexport function copy(out, a) {\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  out[3] = a[3];\n  out[4] = a[4];\n  out[5] = a[5];\n  return out;\n}\n/**\n * Set a mat2d to the identity matrix\n *\n * @param {mat2d} out the receiving matrix\n * @returns {mat2d} out\n */\n\nexport function identity(out) {\n  out[0] = 1;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 1;\n  out[4] = 0;\n  out[5] = 0;\n  return out;\n}\n/**\n * Create a new mat2d with the given values\n *\n * @param {Number} a Component A (index 0)\n * @param {Number} b Component B (index 1)\n * @param {Number} c Component C (index 2)\n * @param {Number} d Component D (index 3)\n * @param {Number} tx Component TX (index 4)\n * @param {Number} ty Component TY (index 5)\n * @returns {mat2d} A new mat2d\n */\n\nexport function fromValues(a, b, c, d, tx, ty) {\n  var out = new glMatrix.ARRAY_TYPE(6);\n  out[0] = a;\n  out[1] = b;\n  out[2] = c;\n  out[3] = d;\n  out[4] = tx;\n  out[5] = ty;\n  return out;\n}\n/**\n * Set the components of a mat2d to the given values\n *\n * @param {mat2d} out the receiving matrix\n * @param {Number} a Component A (index 0)\n * @param {Number} b Component B (index 1)\n * @param {Number} c Component C (index 2)\n * @param {Number} d Component D (index 3)\n * @param {Number} tx Component TX (index 4)\n * @param {Number} ty Component TY (index 5)\n * @returns {mat2d} out\n */\n\nexport function set(out, a, b, c, d, tx, ty) {\n  out[0] = a;\n  out[1] = b;\n  out[2] = c;\n  out[3] = d;\n  out[4] = tx;\n  out[5] = ty;\n  return out;\n}\n/**\n * Inverts a mat2d\n *\n * @param {mat2d} out the receiving matrix\n * @param {ReadonlyMat2d} a the source matrix\n * @returns {mat2d} out\n */\n\nexport function invert(out, a) {\n  var aa = a[0],\n      ab = a[1],\n      ac = a[2],\n      ad = a[3];\n  var atx = a[4],\n      aty = a[5];\n  var det = aa * ad - ab * ac;\n\n  if (!det) {\n    return null;\n  }\n\n  det = 1.0 / det;\n  out[0] = ad * det;\n  out[1] = -ab * det;\n  out[2] = -ac * det;\n  out[3] = aa * det;\n  out[4] = (ac * aty - ad * atx) * det;\n  out[5] = (ab * atx - aa * aty) * det;\n  return out;\n}\n/**\n * Calculates the determinant of a mat2d\n *\n * @param {ReadonlyMat2d} a the source matrix\n * @returns {Number} determinant of a\n */\n\nexport function determinant(a) {\n  return a[0] * a[3] - a[1] * a[2];\n}\n/**\n * Multiplies two mat2d's\n *\n * @param {mat2d} out the receiving matrix\n * @param {ReadonlyMat2d} a the first operand\n * @param {ReadonlyMat2d} b the second operand\n * @returns {mat2d} out\n */\n\nexport function multiply(out, a, b) {\n  var a0 = a[0],\n      a1 = a[1],\n      a2 = a[2],\n      a3 = a[3],\n      a4 = a[4],\n      a5 = a[5];\n  var b0 = b[0],\n      b1 = b[1],\n      b2 = b[2],\n      b3 = b[3],\n      b4 = b[4],\n      b5 = b[5];\n  out[0] = a0 * b0 + a2 * b1;\n  out[1] = a1 * b0 + a3 * b1;\n  out[2] = a0 * b2 + a2 * b3;\n  out[3] = a1 * b2 + a3 * b3;\n  out[4] = a0 * b4 + a2 * b5 + a4;\n  out[5] = a1 * b4 + a3 * b5 + a5;\n  return out;\n}\n/**\n * Rotates a mat2d by the given angle\n *\n * @param {mat2d} out the receiving matrix\n * @param {ReadonlyMat2d} a the matrix to rotate\n * @param {Number} rad the angle to rotate the matrix by\n * @returns {mat2d} out\n */\n\nexport function rotate(out, a, rad) {\n  var a0 = a[0],\n      a1 = a[1],\n      a2 = a[2],\n      a3 = a[3],\n      a4 = a[4],\n      a5 = a[5];\n  var s = Math.sin(rad);\n  var c = Math.cos(rad);\n  out[0] = a0 * c + a2 * s;\n  out[1] = a1 * c + a3 * s;\n  out[2] = a0 * -s + a2 * c;\n  out[3] = a1 * -s + a3 * c;\n  out[4] = a4;\n  out[5] = a5;\n  return out;\n}\n/**\n * Scales the mat2d by the dimensions in the given vec2\n *\n * @param {mat2d} out the receiving matrix\n * @param {ReadonlyMat2d} a the matrix to translate\n * @param {ReadonlyVec2} v the vec2 to scale the matrix by\n * @returns {mat2d} out\n **/\n\nexport function scale(out, a, v) {\n  var a0 = a[0],\n      a1 = a[1],\n      a2 = a[2],\n      a3 = a[3],\n      a4 = a[4],\n      a5 = a[5];\n  var v0 = v[0],\n      v1 = v[1];\n  out[0] = a0 * v0;\n  out[1] = a1 * v0;\n  out[2] = a2 * v1;\n  out[3] = a3 * v1;\n  out[4] = a4;\n  out[5] = a5;\n  return out;\n}\n/**\n * Translates the mat2d by the dimensions in the given vec2\n *\n * @param {mat2d} out the receiving matrix\n * @param {ReadonlyMat2d} a the matrix to translate\n * @param {ReadonlyVec2} v the vec2 to translate the matrix by\n * @returns {mat2d} out\n **/\n\nexport function translate(out, a, v) {\n  var a0 = a[0],\n      a1 = a[1],\n      a2 = a[2],\n      a3 = a[3],\n      a4 = a[4],\n      a5 = a[5];\n  var v0 = v[0],\n      v1 = v[1];\n  out[0] = a0;\n  out[1] = a1;\n  out[2] = a2;\n  out[3] = a3;\n  out[4] = a0 * v0 + a2 * v1 + a4;\n  out[5] = a1 * v0 + a3 * v1 + a5;\n  return out;\n}\n/**\n * Creates a matrix from a given angle\n * This is equivalent to (but much faster than):\n *\n *     mat2d.identity(dest);\n *     mat2d.rotate(dest, dest, rad);\n *\n * @param {mat2d} out mat2d receiving operation result\n * @param {Number} rad the angle to rotate the matrix by\n * @returns {mat2d} out\n */\n\nexport function fromRotation(out, rad) {\n  var s = Math.sin(rad),\n      c = Math.cos(rad);\n  out[0] = c;\n  out[1] = s;\n  out[2] = -s;\n  out[3] = c;\n  out[4] = 0;\n  out[5] = 0;\n  return out;\n}\n/**\n * Creates a matrix from a vector scaling\n * This is equivalent to (but much faster than):\n *\n *     mat2d.identity(dest);\n *     mat2d.scale(dest, dest, vec);\n *\n * @param {mat2d} out mat2d receiving operation result\n * @param {ReadonlyVec2} v Scaling vector\n * @returns {mat2d} out\n */\n\nexport function fromScaling(out, v) {\n  out[0] = v[0];\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = v[1];\n  out[4] = 0;\n  out[5] = 0;\n  return out;\n}\n/**\n * Creates a matrix from a vector translation\n * This is equivalent to (but much faster than):\n *\n *     mat2d.identity(dest);\n *     mat2d.translate(dest, dest, vec);\n *\n * @param {mat2d} out mat2d receiving operation result\n * @param {ReadonlyVec2} v Translation vector\n * @returns {mat2d} out\n */\n\nexport function fromTranslation(out, v) {\n  out[0] = 1;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 1;\n  out[4] = v[0];\n  out[5] = v[1];\n  return out;\n}\n/**\n * Returns a string representation of a mat2d\n *\n * @param {ReadonlyMat2d} a matrix to represent as a string\n * @returns {String} string representation of the matrix\n */\n\nexport function str(a) {\n  return \"mat2d(\" + a[0] + \", \" + a[1] + \", \" + a[2] + \", \" + a[3] + \", \" + a[4] + \", \" + a[5] + \")\";\n}\n/**\n * Returns Frobenius norm of a mat2d\n *\n * @param {ReadonlyMat2d} a the matrix to calculate Frobenius norm of\n * @returns {Number} Frobenius norm\n */\n\nexport function frob(a) {\n  return Math.hypot(a[0], a[1], a[2], a[3], a[4], a[5], 1);\n}\n/**\n * Adds two mat2d's\n *\n * @param {mat2d} out the receiving matrix\n * @param {ReadonlyMat2d} a the first operand\n * @param {ReadonlyMat2d} b the second operand\n * @returns {mat2d} out\n */\n\nexport function add(out, a, b) {\n  out[0] = a[0] + b[0];\n  out[1] = a[1] + b[1];\n  out[2] = a[2] + b[2];\n  out[3] = a[3] + b[3];\n  out[4] = a[4] + b[4];\n  out[5] = a[5] + b[5];\n  return out;\n}\n/**\n * Subtracts matrix b from matrix a\n *\n * @param {mat2d} out the receiving matrix\n * @param {ReadonlyMat2d} a the first operand\n * @param {ReadonlyMat2d} b the second operand\n * @returns {mat2d} out\n */\n\nexport function subtract(out, a, b) {\n  out[0] = a[0] - b[0];\n  out[1] = a[1] - b[1];\n  out[2] = a[2] - b[2];\n  out[3] = a[3] - b[3];\n  out[4] = a[4] - b[4];\n  out[5] = a[5] - b[5];\n  return out;\n}\n/**\n * Multiply each element of the matrix by a scalar.\n *\n * @param {mat2d} out the receiving matrix\n * @param {ReadonlyMat2d} a the matrix to scale\n * @param {Number} b amount to scale the matrix's elements by\n * @returns {mat2d} out\n */\n\nexport function multiplyScalar(out, a, b) {\n  out[0] = a[0] * b;\n  out[1] = a[1] * b;\n  out[2] = a[2] * b;\n  out[3] = a[3] * b;\n  out[4] = a[4] * b;\n  out[5] = a[5] * b;\n  return out;\n}\n/**\n * Adds two mat2d's after multiplying each element of the second operand by a scalar value.\n *\n * @param {mat2d} out the receiving vector\n * @param {ReadonlyMat2d} a the first operand\n * @param {ReadonlyMat2d} b the second operand\n * @param {Number} scale the amount to scale b's elements by before adding\n * @returns {mat2d} out\n */\n\nexport function multiplyScalarAndAdd(out, a, b, scale) {\n  out[0] = a[0] + b[0] * scale;\n  out[1] = a[1] + b[1] * scale;\n  out[2] = a[2] + b[2] * scale;\n  out[3] = a[3] + b[3] * scale;\n  out[4] = a[4] + b[4] * scale;\n  out[5] = a[5] + b[5] * scale;\n  return out;\n}\n/**\n * Returns whether or not the matrices have exactly the same elements in the same position (when compared with ===)\n *\n * @param {ReadonlyMat2d} a The first matrix.\n * @param {ReadonlyMat2d} b The second matrix.\n * @returns {Boolean} True if the matrices are equal, false otherwise.\n */\n\nexport function exactEquals(a, b) {\n  return a[0] === b[0] && a[1] === b[1] && a[2] === b[2] && a[3] === b[3] && a[4] === b[4] && a[5] === b[5];\n}\n/**\n * Returns whether or not the matrices have approximately the same elements in the same position.\n *\n * @param {ReadonlyMat2d} a The first matrix.\n * @param {ReadonlyMat2d} b The second matrix.\n * @returns {Boolean} True if the matrices are equal, false otherwise.\n */\n\nexport function equals(a, b) {\n  var a0 = a[0],\n      a1 = a[1],\n      a2 = a[2],\n      a3 = a[3],\n      a4 = a[4],\n      a5 = a[5];\n  var b0 = b[0],\n      b1 = b[1],\n      b2 = b[2],\n      b3 = b[3],\n      b4 = b[4],\n      b5 = b[5];\n  return Math.abs(a0 - b0) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a0), Math.abs(b0)) && Math.abs(a1 - b1) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a1), Math.abs(b1)) && Math.abs(a2 - b2) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a2), Math.abs(b2)) && Math.abs(a3 - b3) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a3), Math.abs(b3)) && Math.abs(a4 - b4) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a4), Math.abs(b4)) && Math.abs(a5 - b5) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a5), Math.abs(b5));\n}\n/**\n * Alias for {@link mat2d.multiply}\n * @function\n */\n\nexport var mul = multiply;\n/**\n * Alias for {@link mat2d.subtract}\n * @function\n */\n\nexport var sub = subtract;", "import * as glMatrix from \"./common.js\";\n/**\n * 2 Dimensional Vector\n * @module vec2\n */\n\n/**\n * Creates a new, empty vec2\n *\n * @returns {vec2} a new 2D vector\n */\n\nexport function create() {\n  var out = new glMatrix.ARRAY_TYPE(2);\n\n  if (glMatrix.ARRAY_TYPE != Float32Array) {\n    out[0] = 0;\n    out[1] = 0;\n  }\n\n  return out;\n}\n/**\n * Creates a new vec2 initialized with values from an existing vector\n *\n * @param {ReadonlyVec2} a vector to clone\n * @returns {vec2} a new 2D vector\n */\n\nexport function clone(a) {\n  var out = new glMatrix.ARRAY_TYPE(2);\n  out[0] = a[0];\n  out[1] = a[1];\n  return out;\n}\n/**\n * Creates a new vec2 initialized with the given values\n *\n * @param {Number} x X component\n * @param {Number} y Y component\n * @returns {vec2} a new 2D vector\n */\n\nexport function fromValues(x, y) {\n  var out = new glMatrix.ARRAY_TYPE(2);\n  out[0] = x;\n  out[1] = y;\n  return out;\n}\n/**\n * Copy the values from one vec2 to another\n *\n * @param {vec2} out the receiving vector\n * @param {ReadonlyVec2} a the source vector\n * @returns {vec2} out\n */\n\nexport function copy(out, a) {\n  out[0] = a[0];\n  out[1] = a[1];\n  return out;\n}\n/**\n * Set the components of a vec2 to the given values\n *\n * @param {vec2} out the receiving vector\n * @param {Number} x X component\n * @param {Number} y Y component\n * @returns {vec2} out\n */\n\nexport function set(out, x, y) {\n  out[0] = x;\n  out[1] = y;\n  return out;\n}\n/**\n * Adds two vec2's\n *\n * @param {vec2} out the receiving vector\n * @param {ReadonlyVec2} a the first operand\n * @param {ReadonlyVec2} b the second operand\n * @returns {vec2} out\n */\n\nexport function add(out, a, b) {\n  out[0] = a[0] + b[0];\n  out[1] = a[1] + b[1];\n  return out;\n}\n/**\n * Subtracts vector b from vector a\n *\n * @param {vec2} out the receiving vector\n * @param {ReadonlyVec2} a the first operand\n * @param {ReadonlyVec2} b the second operand\n * @returns {vec2} out\n */\n\nexport function subtract(out, a, b) {\n  out[0] = a[0] - b[0];\n  out[1] = a[1] - b[1];\n  return out;\n}\n/**\n * Multiplies two vec2's\n *\n * @param {vec2} out the receiving vector\n * @param {ReadonlyVec2} a the first operand\n * @param {ReadonlyVec2} b the second operand\n * @returns {vec2} out\n */\n\nexport function multiply(out, a, b) {\n  out[0] = a[0] * b[0];\n  out[1] = a[1] * b[1];\n  return out;\n}\n/**\n * Divides two vec2's\n *\n * @param {vec2} out the receiving vector\n * @param {ReadonlyVec2} a the first operand\n * @param {ReadonlyVec2} b the second operand\n * @returns {vec2} out\n */\n\nexport function divide(out, a, b) {\n  out[0] = a[0] / b[0];\n  out[1] = a[1] / b[1];\n  return out;\n}\n/**\n * Math.ceil the components of a vec2\n *\n * @param {vec2} out the receiving vector\n * @param {ReadonlyVec2} a vector to ceil\n * @returns {vec2} out\n */\n\nexport function ceil(out, a) {\n  out[0] = Math.ceil(a[0]);\n  out[1] = Math.ceil(a[1]);\n  return out;\n}\n/**\n * Math.floor the components of a vec2\n *\n * @param {vec2} out the receiving vector\n * @param {ReadonlyVec2} a vector to floor\n * @returns {vec2} out\n */\n\nexport function floor(out, a) {\n  out[0] = Math.floor(a[0]);\n  out[1] = Math.floor(a[1]);\n  return out;\n}\n/**\n * Returns the minimum of two vec2's\n *\n * @param {vec2} out the receiving vector\n * @param {ReadonlyVec2} a the first operand\n * @param {ReadonlyVec2} b the second operand\n * @returns {vec2} out\n */\n\nexport function min(out, a, b) {\n  out[0] = Math.min(a[0], b[0]);\n  out[1] = Math.min(a[1], b[1]);\n  return out;\n}\n/**\n * Returns the maximum of two vec2's\n *\n * @param {vec2} out the receiving vector\n * @param {ReadonlyVec2} a the first operand\n * @param {ReadonlyVec2} b the second operand\n * @returns {vec2} out\n */\n\nexport function max(out, a, b) {\n  out[0] = Math.max(a[0], b[0]);\n  out[1] = Math.max(a[1], b[1]);\n  return out;\n}\n/**\n * Math.round the components of a vec2\n *\n * @param {vec2} out the receiving vector\n * @param {ReadonlyVec2} a vector to round\n * @returns {vec2} out\n */\n\nexport function round(out, a) {\n  out[0] = Math.round(a[0]);\n  out[1] = Math.round(a[1]);\n  return out;\n}\n/**\n * Scales a vec2 by a scalar number\n *\n * @param {vec2} out the receiving vector\n * @param {ReadonlyVec2} a the vector to scale\n * @param {Number} b amount to scale the vector by\n * @returns {vec2} out\n */\n\nexport function scale(out, a, b) {\n  out[0] = a[0] * b;\n  out[1] = a[1] * b;\n  return out;\n}\n/**\n * Adds two vec2's after scaling the second operand by a scalar value\n *\n * @param {vec2} out the receiving vector\n * @param {ReadonlyVec2} a the first operand\n * @param {ReadonlyVec2} b the second operand\n * @param {Number} scale the amount to scale b by before adding\n * @returns {vec2} out\n */\n\nexport function scaleAndAdd(out, a, b, scale) {\n  out[0] = a[0] + b[0] * scale;\n  out[1] = a[1] + b[1] * scale;\n  return out;\n}\n/**\n * Calculates the euclidian distance between two vec2's\n *\n * @param {ReadonlyVec2} a the first operand\n * @param {ReadonlyVec2} b the second operand\n * @returns {Number} distance between a and b\n */\n\nexport function distance(a, b) {\n  var x = b[0] - a[0],\n      y = b[1] - a[1];\n  return Math.hypot(x, y);\n}\n/**\n * Calculates the squared euclidian distance between two vec2's\n *\n * @param {ReadonlyVec2} a the first operand\n * @param {ReadonlyVec2} b the second operand\n * @returns {Number} squared distance between a and b\n */\n\nexport function squaredDistance(a, b) {\n  var x = b[0] - a[0],\n      y = b[1] - a[1];\n  return x * x + y * y;\n}\n/**\n * Calculates the length of a vec2\n *\n * @param {ReadonlyVec2} a vector to calculate length of\n * @returns {Number} length of a\n */\n\nexport function length(a) {\n  var x = a[0],\n      y = a[1];\n  return Math.hypot(x, y);\n}\n/**\n * Calculates the squared length of a vec2\n *\n * @param {ReadonlyVec2} a vector to calculate squared length of\n * @returns {Number} squared length of a\n */\n\nexport function squaredLength(a) {\n  var x = a[0],\n      y = a[1];\n  return x * x + y * y;\n}\n/**\n * Negates the components of a vec2\n *\n * @param {vec2} out the receiving vector\n * @param {ReadonlyVec2} a vector to negate\n * @returns {vec2} out\n */\n\nexport function negate(out, a) {\n  out[0] = -a[0];\n  out[1] = -a[1];\n  return out;\n}\n/**\n * Returns the inverse of the components of a vec2\n *\n * @param {vec2} out the receiving vector\n * @param {ReadonlyVec2} a vector to invert\n * @returns {vec2} out\n */\n\nexport function inverse(out, a) {\n  out[0] = 1.0 / a[0];\n  out[1] = 1.0 / a[1];\n  return out;\n}\n/**\n * Normalize a vec2\n *\n * @param {vec2} out the receiving vector\n * @param {ReadonlyVec2} a vector to normalize\n * @returns {vec2} out\n */\n\nexport function normalize(out, a) {\n  var x = a[0],\n      y = a[1];\n  var len = x * x + y * y;\n\n  if (len > 0) {\n    //TODO: evaluate use of glm_invsqrt here?\n    len = 1 / Math.sqrt(len);\n  }\n\n  out[0] = a[0] * len;\n  out[1] = a[1] * len;\n  return out;\n}\n/**\n * Calculates the dot product of two vec2's\n *\n * @param {ReadonlyVec2} a the first operand\n * @param {ReadonlyVec2} b the second operand\n * @returns {Number} dot product of a and b\n */\n\nexport function dot(a, b) {\n  return a[0] * b[0] + a[1] * b[1];\n}\n/**\n * Computes the cross product of two vec2's\n * Note that the cross product must by definition produce a 3D vector\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec2} a the first operand\n * @param {ReadonlyVec2} b the second operand\n * @returns {vec3} out\n */\n\nexport function cross(out, a, b) {\n  var z = a[0] * b[1] - a[1] * b[0];\n  out[0] = out[1] = 0;\n  out[2] = z;\n  return out;\n}\n/**\n * Performs a linear interpolation between two vec2's\n *\n * @param {vec2} out the receiving vector\n * @param {ReadonlyVec2} a the first operand\n * @param {ReadonlyVec2} b the second operand\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\n * @returns {vec2} out\n */\n\nexport function lerp(out, a, b, t) {\n  var ax = a[0],\n      ay = a[1];\n  out[0] = ax + t * (b[0] - ax);\n  out[1] = ay + t * (b[1] - ay);\n  return out;\n}\n/**\n * Generates a random vector with the given scale\n *\n * @param {vec2} out the receiving vector\n * @param {Number} [scale] Length of the resulting vector. If ommitted, a unit vector will be returned\n * @returns {vec2} out\n */\n\nexport function random(out, scale) {\n  scale = scale || 1.0;\n  var r = glMatrix.RANDOM() * 2.0 * Math.PI;\n  out[0] = Math.cos(r) * scale;\n  out[1] = Math.sin(r) * scale;\n  return out;\n}\n/**\n * Transforms the vec2 with a mat2\n *\n * @param {vec2} out the receiving vector\n * @param {ReadonlyVec2} a the vector to transform\n * @param {ReadonlyMat2} m matrix to transform with\n * @returns {vec2} out\n */\n\nexport function transformMat2(out, a, m) {\n  var x = a[0],\n      y = a[1];\n  out[0] = m[0] * x + m[2] * y;\n  out[1] = m[1] * x + m[3] * y;\n  return out;\n}\n/**\n * Transforms the vec2 with a mat2d\n *\n * @param {vec2} out the receiving vector\n * @param {ReadonlyVec2} a the vector to transform\n * @param {ReadonlyMat2d} m matrix to transform with\n * @returns {vec2} out\n */\n\nexport function transformMat2d(out, a, m) {\n  var x = a[0],\n      y = a[1];\n  out[0] = m[0] * x + m[2] * y + m[4];\n  out[1] = m[1] * x + m[3] * y + m[5];\n  return out;\n}\n/**\n * Transforms the vec2 with a mat3\n * 3rd vector component is implicitly '1'\n *\n * @param {vec2} out the receiving vector\n * @param {ReadonlyVec2} a the vector to transform\n * @param {ReadonlyMat3} m matrix to transform with\n * @returns {vec2} out\n */\n\nexport function transformMat3(out, a, m) {\n  var x = a[0],\n      y = a[1];\n  out[0] = m[0] * x + m[3] * y + m[6];\n  out[1] = m[1] * x + m[4] * y + m[7];\n  return out;\n}\n/**\n * Transforms the vec2 with a mat4\n * 3rd vector component is implicitly '0'\n * 4th vector component is implicitly '1'\n *\n * @param {vec2} out the receiving vector\n * @param {ReadonlyVec2} a the vector to transform\n * @param {ReadonlyMat4} m matrix to transform with\n * @returns {vec2} out\n */\n\nexport function transformMat4(out, a, m) {\n  var x = a[0];\n  var y = a[1];\n  out[0] = m[0] * x + m[4] * y + m[12];\n  out[1] = m[1] * x + m[5] * y + m[13];\n  return out;\n}\n/**\n * Rotate a 2D vector\n * @param {vec2} out The receiving vec2\n * @param {ReadonlyVec2} a The vec2 point to rotate\n * @param {ReadonlyVec2} b The origin of the rotation\n * @param {Number} rad The angle of rotation in radians\n * @returns {vec2} out\n */\n\nexport function rotate(out, a, b, rad) {\n  //Translate point to the origin\n  var p0 = a[0] - b[0],\n      p1 = a[1] - b[1],\n      sinC = Math.sin(rad),\n      cosC = Math.cos(rad); //perform rotation and translate to correct position\n\n  out[0] = p0 * cosC - p1 * sinC + b[0];\n  out[1] = p0 * sinC + p1 * cosC + b[1];\n  return out;\n}\n/**\n * Get the angle between two 2D vectors\n * @param {ReadonlyVec2} a The first operand\n * @param {ReadonlyVec2} b The second operand\n * @returns {Number} The angle in radians\n */\n\nexport function angle(a, b) {\n  var x1 = a[0],\n      y1 = a[1],\n      x2 = b[0],\n      y2 = b[1],\n      // mag is the product of the magnitudes of a and b\n  mag = Math.sqrt(x1 * x1 + y1 * y1) * Math.sqrt(x2 * x2 + y2 * y2),\n      // mag &&.. short circuits if mag == 0\n  cosine = mag && (x1 * x2 + y1 * y2) / mag; // Math.min(Math.max(cosine, -1), 1) clamps the cosine between -1 and 1\n\n  return Math.acos(Math.min(Math.max(cosine, -1), 1));\n}\n/**\n * Set the components of a vec2 to zero\n *\n * @param {vec2} out the receiving vector\n * @returns {vec2} out\n */\n\nexport function zero(out) {\n  out[0] = 0.0;\n  out[1] = 0.0;\n  return out;\n}\n/**\n * Returns a string representation of a vector\n *\n * @param {ReadonlyVec2} a vector to represent as a string\n * @returns {String} string representation of the vector\n */\n\nexport function str(a) {\n  return \"vec2(\" + a[0] + \", \" + a[1] + \")\";\n}\n/**\n * Returns whether or not the vectors exactly have the same elements in the same position (when compared with ===)\n *\n * @param {ReadonlyVec2} a The first vector.\n * @param {ReadonlyVec2} b The second vector.\n * @returns {Boolean} True if the vectors are equal, false otherwise.\n */\n\nexport function exactEquals(a, b) {\n  return a[0] === b[0] && a[1] === b[1];\n}\n/**\n * Returns whether or not the vectors have approximately the same elements in the same position.\n *\n * @param {ReadonlyVec2} a The first vector.\n * @param {ReadonlyVec2} b The second vector.\n * @returns {Boolean} True if the vectors are equal, false otherwise.\n */\n\nexport function equals(a, b) {\n  var a0 = a[0],\n      a1 = a[1];\n  var b0 = b[0],\n      b1 = b[1];\n  return Math.abs(a0 - b0) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a0), Math.abs(b0)) && Math.abs(a1 - b1) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a1), Math.abs(b1));\n}\n/**\n * Alias for {@link vec2.length}\n * @function\n */\n\nexport var len = length;\n/**\n * Alias for {@link vec2.subtract}\n * @function\n */\n\nexport var sub = subtract;\n/**\n * Alias for {@link vec2.multiply}\n * @function\n */\n\nexport var mul = multiply;\n/**\n * Alias for {@link vec2.divide}\n * @function\n */\n\nexport var div = divide;\n/**\n * Alias for {@link vec2.distance}\n * @function\n */\n\nexport var dist = distance;\n/**\n * Alias for {@link vec2.squaredDistance}\n * @function\n */\n\nexport var sqrDist = squaredDistance;\n/**\n * Alias for {@link vec2.squaredLength}\n * @function\n */\n\nexport var sqrLen = squaredLength;\n/**\n * Perform some operation over an array of vec2s.\n *\n * @param {Array} a the array of vectors to iterate over\n * @param {Number} stride Number of elements between the start of each vec2. If 0 assumes tightly packed\n * @param {Number} offset Number of elements to skip at the beginning of the array\n * @param {Number} count Number of vec2s to iterate over. If 0 iterates over entire array\n * @param {Function} fn Function to call for each vector in the array\n * @param {Object} [arg] additional argument to pass to fn\n * @returns {Array} a\n * @function\n */\n\nexport var forEach = function () {\n  var vec = create();\n  return function (a, stride, offset, count, fn, arg) {\n    var i, l;\n\n    if (!stride) {\n      stride = 2;\n    }\n\n    if (!offset) {\n      offset = 0;\n    }\n\n    if (count) {\n      l = Math.min(count * stride + offset, a.length);\n    } else {\n      l = a.length;\n    }\n\n    for (i = offset; i < l; i += stride) {\n      vec[0] = a[i];\n      vec[1] = a[i + 1];\n      fn(vec, vec, arg);\n      a[i] = vec[0];\n      a[i + 1] = vec[1];\n    }\n\n    return a;\n  };\n}();", "import { vec2, mat2d } from \"gl-matrix\";\n// gotta implement it myself until\n// github.com/toji/gl-matrix/pull/490 gets accepted\nfunction signedAngle(a, b) {\n    let ax = a[0], ay = a[1], bx = b[0], by = b[1];\n    return Math.atan2(ax * by - ay * bx, ax * bx + ay * by);\n}\nexport class Transform {\n    constructor(translation, zoom, rotation) {\n        this.translation = vec2.create();\n        this.zoom = 1;\n        this.rotation = 0;\n        this.translation = translation || this.translation;\n        this.zoom = zoom || this.zoom;\n        this.rotation = rotation || this.rotation;\n    }\n    translationMatrix() {\n        return mat2d.fromTranslation(mat2d.create(), this.translation);\n    }\n    scalingMatrix() {\n        return mat2d.fromScaling(mat2d.create(), [this.zoom, this.zoom]);\n    }\n    rotationMatrix() {\n        return mat2d.fromRotation(mat2d.create(), this.rotation);\n    }\n    matrix() {\n        let m = mat2d.create();\n        mat2d.mul(m, this.translationMatrix(), this.scalingMatrix());\n        mat2d.mul(m, m, this.rotationMatrix());\n        return m;\n    }\n    translate(translation) {\n        vec2.add(this.translation, this.translation, translation);\n    }\n    zoomInto(center, zoom) {\n        this.zoom *= zoom;\n        vec2.sub(this.translation, this.translation, center);\n        vec2.scaleAndAdd(this.translation, center, this.translation, zoom);\n    }\n    rotateAround(center, angle) {\n        this.rotation += angle;\n        vec2.rotate(this.translation, this.translation, center, angle);\n    }\n    lerp(transform, t) {\n        vec2.lerp(this.translation, this.translation, transform.translation, t);\n        this.zoom = (1 - t) * this.zoom + t * transform.zoom;\n        this.rotation = (1 - t) * this.rotation + t * transform.rotation;\n    }\n    copy(transform) {\n        vec2.copy(this.translation, transform.translation);\n        this.zoom = transform.zoom;\n        this.rotation = transform.rotation;\n    }\n    /** mutates the argument!!! */\n    apply(point) {\n        return vec2.transformMat2d(point, point, this.matrix());\n    }\n    inverse() {\n        let p = vec2.negate(vec2.create(), this.translation);\n        vec2.scale(p, p, 1 / this.zoom);\n        vec2.rotate(p, p, vec2.create(), -this.rotation);\n        return new Transform(p, 1 / this.zoom, -this.rotation);\n    }\n}\nexport default class RenderSpace {\n    constructor(arg) {\n        this._listeners = [];\n        this.config = {\n            /** value in the rage (1, \u221E) determining the zoom speed of the scrollwheel */\n            scroll_sensitivity: 1.01,\n            /** value in the range (0, \u221E) determining the sensitivity of the rotation */\n            rotation_sensitivity: 0.01,\n            /** value in the range [0, \u221E) determining the strength of damping */\n            damping_strength: 0,\n            panning: true,\n            zooming: true,\n            rotating: true\n        };\n        let ctx = arg instanceof HTMLCanvasElement ? arg.getContext(\"2d\") : arg;\n        if (ctx === null)\n            throw new Error(\"Failed to get CanvasRenderingContext2D\");\n        this.ctx = ctx;\n        this.transform = new Transform();\n        this.target_transform = new Transform();\n        this.canvas.style.touchAction = \"none\";\n        event_listeners(this, this.canvas);\n    }\n    updateDamping(dt, update_transform = true) {\n        this.transform.lerp(this.target_transform, 1 - Math.exp(-dt / this.config.damping_strength));\n        if (update_transform)\n            this.updateTransform();\n    }\n    updateTransform() {\n        if (this.config.damping_strength === 0) {\n            this.transform.copy(this.target_transform);\n        }\n        this.ctx.resetTransform();\n        this.ctx.translate(...this.transform.translation);\n        this.ctx.rotate(this.transform.rotation);\n        this.ctx.scale(this.transform.zoom, this.transform.zoom);\n        this._listeners.forEach(listener => listener(this));\n    }\n    /** mutates the argument!!! */\n    renderSpaceToScreen(point) {\n        return this.transform.apply(point);\n    }\n    /** mutates the argument!!! */\n    screenToRenderSpace(point) {\n        return this.transform.inverse().apply(point);\n    }\n    /**\n      * returns the smallest render-space AABB that covers the entire screen\n      * @returns {[vec2, vec2]} top left and bottom right corner\n      **/\n    getScreenAABB() {\n        let screen_corners = [\n            vec2.fromValues(0, 0),\n            vec2.fromValues(0, this.canvas.height),\n            vec2.fromValues(this.canvas.width, 0),\n            vec2.fromValues(this.canvas.width, this.canvas.height)\n        ].map(this.screenToRenderSpace.bind(this));\n        let x = screen_corners.map(v => v[0]);\n        let y = screen_corners.map(v => v[1]);\n        return [\n            vec2.fromValues(Math.min(...x), Math.min(...y)),\n            vec2.fromValues(Math.max(...x), Math.max(...y))\n        ];\n    }\n    translate(translation) {\n        this.target_transform.translate(translation);\n    }\n    zoomInto(center, zoom) {\n        this.target_transform.zoomInto(center, zoom);\n    }\n    rotateAround(center, angle) {\n        this.target_transform.rotateAround(center, angle);\n    }\n    lerp(transform, t) {\n        this.target_transform.lerp(transform, t);\n    }\n    addListener(listener) {\n        this._listeners.push(listener);\n    }\n    removeListener(listener) {\n        this._listeners.splice(this._listeners.indexOf(listener), 1);\n    }\n    clearScreen() {\n        this.ctx.save();\n        this.ctx.resetTransform();\n        this.ctx.clearRect(0, 0, this.canvas.width, this.canvas.height);\n        this.ctx.restore();\n    }\n    get canvas() {\n        return this.ctx.canvas;\n    }\n    get listeners() {\n        return this._listeners.slice();\n    }\n}\nfunction event_listeners(space, canvas) {\n    let pointers = {};\n    canvas.addEventListener(\"contextmenu\", event => event.preventDefault());\n    canvas.addEventListener(\"pointerdown\", event => {\n        pointers[event.pointerId] = {\n            pos: vec2.fromValues(event.offsetX, event.offsetY),\n            button: event.button\n        };\n    });\n    canvas.addEventListener(\"pointerup\", event => {\n        delete pointers[event.pointerId];\n    });\n    canvas.addEventListener(\"pointermove\", event => {\n        const pointer = pointers[event.pointerId];\n        if (!pointer)\n            return;\n        let last = vec2.clone(pointer.pos);\n        vec2.set(pointer.pos, event.offsetX, event.offsetY);\n        switch (Object.keys(pointers).length) {\n            case 1:\n                if (pointer.button === 2 && space.config.rotating) {\n                    space.rotateAround([canvas.width / 2, canvas.height / 2], space.config.rotation_sensitivity * (pointer.pos[0] - last[0]));\n                }\n                if (pointer.button == 0 && space.config.panning) {\n                    space.translate(vec2.sub(vec2.create(), pointer.pos, last));\n                }\n                space.updateTransform();\n                break;\n            case 2:\n                const anchor = Object.values(pointers).find(p => p !== pointer);\n                if (anchor === undefined)\n                    throw new Error(\"something is really wrong bro, good luck debugging ts\");\n                let center = vec2.add(vec2.create(), pointer.pos, anchor.pos);\n                vec2.scale(center, center, 0.5);\n                let diff = vec2.sub(vec2.create(), pointer.pos, anchor.pos);\n                let last_diff = vec2.sub(vec2.create(), last, anchor.pos);\n                if (space.config.panning) {\n                    let movement = vec2.sub(vec2.create(), pointer.pos, last);\n                    space.translate(vec2.scale(movement, movement, 0.5));\n                }\n                if (space.config.zooming) {\n                    space.zoomInto(center, vec2.len(diff) / vec2.len(last_diff));\n                }\n                if (space.config.rotating) {\n                    space.rotateAround(center, signedAngle(last_diff, diff));\n                }\n                space.updateTransform();\n                break;\n        }\n    });\n    canvas.addEventListener(\"wheel\", event => {\n        if (!space.config.zooming)\n            return;\n        let zoom = Math.pow(space.config.scroll_sensitivity, -event.deltaY);\n        space.zoomInto([event.offsetX, event.offsetY], zoom);\n        space.updateTransform();\n        event.preventDefault();\n    }, { passive: false });\n}\n", "import \"./index.css\";\nimport RenderSpace from \"movable-render-space\";\n\nconst canvas = document.getElementById(\"canvas\") as HTMLCanvasElement;\nconst space = new RenderSpace(canvas);\nconst ctx = space.ctx;\n\nspace.config.rotating = false;\nspace.zoomInto([0, 0], 100);\nspace.translate([window.innerWidth / 2, window.innerHeight / 2]);\n\nlet grid = new Map<number, Set<number>>();\n\nfunction step() {\n    let next_grid = new Map<number, Set<number>>();\n\n    // all cells that will potentially be alive next iteration\n    for (let [x, set] of grid) {\n        for (let y of set) {\n            for (let i = -1; i <= 1; i++) {\n                let col = next_grid.get(x + i);\n                if (col === undefined) {\n                    col = new Set<number>();\n                    next_grid.set(x + i, col);\n                }\n                col.add(y - 1);\n                col.add(y);\n                col.add(y + 1);\n            }\n        }\n    }\n\n    // prune down all of the ones that aren't actually alive\n    for (let [x, set] of next_grid) {\n        for (let y of set) {\n            let neighbors = 0;\n            for (let i = -1; i <= 1; i++) {\n                let col = grid.get(x + i);\n                if (col === undefined) continue;\n                neighbors += col.has(y - 1) ? 1 : 0;\n                neighbors += col.has(y) ? 1 : 0;\n                neighbors += col.has(y + 1) ? 1 : 0;\n            }\n            if (neighbors < 3 || neighbors > 4) next_grid.get(x).delete(y);\n            if (neighbors === 4 && !grid.get(x)?.has?.(y)) next_grid.get(x).delete(y);\n        }\n    }\n\n    grid = next_grid;\n}\n\nfunction render() {\n    const aabb = space.getScreenAABB();\n    space.clearScreen();\n\n    ctx.fillStyle = \"#404040\";\n\n    for (let [x, set] of grid) {\n        for (let y of set) {\n            ctx.fillRect(x - 0.5, y - 0.5, 1, 1);\n        }\n    }\n\n    const w = 0.05; // grid width\n    ctx.strokeStyle = \"black\";\n    ctx.lineCap = \"square\";\n    ctx.lineWidth = w;\n    for (let x = Math.round(aabb[0][0] - w / 2) + 0.5; x <= aabb[1][0] + w / 2; x++) {\n        ctx.beginPath();\n        ctx.moveTo(x, aabb[0][1]);\n        ctx.lineTo(x, aabb[1][1]);\n        ctx.stroke();\n    }\n    for (let y = Math.round(aabb[0][1] - w / 2) + 0.5; y <= aabb[1][1] + w / 2; y++) {\n        ctx.beginPath();\n        ctx.moveTo(aabb[0][0], y);\n        ctx.lineTo(aabb[1][0], y);\n        ctx.stroke();\n    }\n}\n\nlet running = false;\n\nfunction frame() {\n    if (running) {\n        let now = performance.now();\n        while (performance.now() - now < 16) step();\n    }\n    render();\n    requestAnimationFrame(frame);\n}\nrequestAnimationFrame(frame);\n\nfunction resize() {\n    canvas.width = window.innerWidth;\n    canvas.height = window.innerHeight;\n    space.updateTransform();\n    render();\n}\nwindow.addEventListener(\"resize\", resize);\nresize();\n\n\nwindow.addEventListener(\"click\", event => {\n    if (event.x < 100 && event.y < 100) {\n        running = !running;\n        return;\n    }\n\n    let [i, j] = space.screenToRenderSpace([event.x, event.y]);\n    [i, j] = [Math.round(i), Math.round(j)];\n\n    let col = grid.get(i);\n    if (col === undefined) {\n        col = new Set();\n        grid.set(i, col);\n    }\n    if (col.has(j)) {\n        col.delete(j);\n    } else {\n        col.add(j);\n    }\n\n    render();\n});\n"],
  "mappings": "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",
  "names": ["scale", "add", "clone", "copy", "create", "equals", "exactEquals", "fromValues", "mul", "multiply", "rotate", "scale", "set", "str", "sub", "subtract", "create", "clone", "fromValues", "copy", "set", "add", "subtract", "multiply", "scale", "len", "rotate", "str", "exactEquals", "equals", "sub", "mul", "angle", "ctx", "space", "canvas", "set"]
}
